import{i as ft,k as Y,$ as re,a3 as ht,V as xe,aH as Re,g as mt,l as fe}from"./index-91e91fd5.js";import{K as h,a as De,d as N,i as p,Q as yt,c as Tt,G as g,e as vt,f as bt,g as B,h as J,D as b,j as Ae,O as ge,k as Nt,p as wt}from"./parser-0b83345b.js";const gt=5;function It(e,t){const[n,i]=t?[e,t]:[void 0,e];let s=" Did you mean ";n&&(s+=n+" ");const a=i.map(c=>`"${c}"`);switch(a.length){case 0:return"";case 1:return s+a[0]+"?";case 2:return s+a[0]+" or "+a[1]+"?"}const u=a.slice(0,gt),l=u.pop();return s+u.join(", ")+", or "+l+"?"}function Fe(e){return e}function Ve(e,t){const n=Object.create(null);for(const i of e)n[t(i)]=i;return n}function X(e,t,n){const i=Object.create(null);for(const s of e)i[t(s)]=n(s);return i}function be(e,t){const n=Object.create(null);for(const i of Object.keys(e))n[i]=t(e[i],i);return n}function _t(e,t){let n=0,i=0;for(;n<e.length&&i<t.length;){let s=e.charCodeAt(n),a=t.charCodeAt(i);if(he(s)&&he(a)){let u=0;do++n,u=u*10+s-Se,s=e.charCodeAt(n);while(he(s)&&u>0);let l=0;do++i,l=l*10+a-Se,a=t.charCodeAt(i);while(he(a)&&l>0);if(u<l)return-1;if(u>l)return 1}else{if(s<a)return-1;if(s>a)return 1;++n,++i}}return e.length-t.length}const Se=48,St=57;function he(e){return!isNaN(e)&&Se<=e&&e<=St}function Et(e,t){const n=Object.create(null),i=new At(e),s=Math.floor(e.length*.4)+1;for(const a of t){const u=i.measure(a,s);u!==void 0&&(n[a]=u)}return Object.keys(n).sort((a,u)=>{const l=n[a]-n[u];return l!==0?l:_t(a,u)})}class At{constructor(t){this._input=t,this._inputLowerCase=t.toLowerCase(),this._inputArray=$e(this._inputLowerCase),this._rows=[new Array(t.length+1).fill(0),new Array(t.length+1).fill(0),new Array(t.length+1).fill(0)]}measure(t,n){if(this._input===t)return 0;const i=t.toLowerCase();if(this._inputLowerCase===i)return 1;let s=$e(i),a=this._inputArray;if(s.length<a.length){const d=s;s=a,a=d}const u=s.length,l=a.length;if(u-l>n)return;const c=this._rows;for(let d=0;d<=l;d++)c[0][d]=d;for(let d=1;d<=u;d++){const v=c[(d-1)%3],I=c[d%3];let M=I[0]=d;for(let S=1;S<=l;S++){const K=s[d-1]===a[S-1]?0:1;let D=Math.min(v[S]+1,I[S-1]+1,v[S-1]+K);if(d>1&&S>1&&s[d-1]===a[S-2]&&s[d-2]===a[S-1]){const E=c[(d-2)%3][S-2];D=Math.min(D,E+1)}D<M&&(M=D),I[S]=D}if(M>n)return}const m=c[u%3][l];return m<=n?m:void 0}}function $e(e){const t=e.length,n=new Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}function R(e){if(e==null)return Object.create(null);if(Object.getPrototypeOf(e)===null)return e;const t=Object.create(null);for(const[n,i]of Object.entries(e))t[n]=i;return t}function Lt(e){return`"${e.replace(Ot,xt)}"`}const Ot=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function xt(e){return Rt[e.charCodeAt(0)]}const Rt=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"],ae=Object.freeze({});function Dt(e,t,n=yt){const i=new Map;for(const E of Object.values(h))i.set(E,Qe(t,E));let s,a=Array.isArray(e),u=[e],l=-1,c=[],m=e,d,v;const I=[],M=[];do{l++;const E=l===u.length,pe=E&&c.length!==0;if(E){if(d=M.length===0?void 0:I[I.length-1],m=v,v=M.pop(),pe)if(a){m=m.slice();let F=0;for(const[se,ee]of c){const de=se-F;ee===null?(m.splice(de,1),F++):m[de]=ee}}else{m=Object.defineProperties({},Object.getOwnPropertyDescriptors(m));for(const[F,se]of c)m[F]=se}l=s.index,u=s.keys,c=s.edits,a=s.inArray,s=s.prev}else if(v){if(d=a?l:u[l],m=v[d],m==null)continue;I.push(d)}let V;if(!Array.isArray(m)){var S,K;De(m)||N(!1,`Invalid AST Node: ${p(m)}.`);const F=E?(S=i.get(m.kind))===null||S===void 0?void 0:S.leave:(K=i.get(m.kind))===null||K===void 0?void 0:K.enter;if(V=F==null?void 0:F.call(t,m,d,v,I,M),V===ae)break;if(V===!1){if(!E){I.pop();continue}}else if(V!==void 0&&(c.push([d,V]),!E))if(De(V))m=V;else{I.pop();continue}}if(V===void 0&&pe&&c.push([d,m]),E)I.pop();else{var D;s={inArray:a,index:l,keys:u,edits:c,prev:s},a=Array.isArray(m),u=a?m:(D=n[m.kind])!==null&&D!==void 0?D:[],l=-1,c=[],v&&M.push(v),v=m}}while(s!==void 0);return c.length!==0?c[c.length-1][1]:e}function un(e){const t=new Array(e.length).fill(null),n=Object.create(null);for(const i of Object.values(h)){let s=!1;const a=new Array(e.length).fill(void 0),u=new Array(e.length).fill(void 0);for(let c=0;c<e.length;++c){const{enter:m,leave:d}=Qe(e[c],i);s||(s=m!=null||d!=null),a[c]=m,u[c]=d}if(!s)continue;const l={enter(...c){const m=c[0];for(let v=0;v<e.length;v++)if(t[v]===null){var d;const I=(d=a[v])===null||d===void 0?void 0:d.apply(e[v],c);if(I===!1)t[v]=m;else if(I===ae)t[v]=ae;else if(I!==void 0)return I}},leave(...c){const m=c[0];for(let v=0;v<e.length;v++)if(t[v]===null){var d;const I=(d=u[v])===null||d===void 0?void 0:d.apply(e[v],c);if(I===ae)t[v]=ae;else if(I!==void 0&&I!==!1)return I}else t[v]===m&&(t[v]=null)}};n[i]=l}return n}function Qe(e,t){const n=e[t];return typeof n=="object"?n:typeof n=="function"?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function C(e){return Dt(e,$t)}const Ft=80,$t={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>o(e.definitions,`

`)},OperationDefinition:{leave(e){const t=y("(",o(e.variableDefinitions,", "),")"),n=o([e.operation,o([e.name,t]),o(e.directives," ")]," ");return(n==="query"?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+y(" = ",n)+y(" ",o(i," "))},SelectionSet:{leave:({selections:e})=>$(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:s}){const a=y("",e,": ")+t;let u=a+y("(",o(n,", "),")");return u.length>Ft&&(u=a+y(`(
`,Te(o(n,`
`)),`
)`)),o([u,o(i," "),s]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+y(" ",o(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>o(["...",y("on ",e),o(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:s})=>`fragment ${e}${y("(",o(n,", "),")")} on ${t} ${y("",o(i," ")," ")}`+s},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?Tt(e):Lt(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+o(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+o(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+y("(",o(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>y("",e,`
`)+o(["schema",o(t," "),$(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>y("",e,`
`)+o(["scalar",t,o(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:s})=>y("",e,`
`)+o(["type",t,y("implements ",o(n," & ")),o(i," "),$(s)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:s})=>y("",e,`
`)+t+(je(n)?y(`(
`,Te(o(n,`
`)),`
)`):y("(",o(n,", "),")"))+": "+i+y(" ",o(s," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:s})=>y("",e,`
`)+o([t+": "+n,y("= ",i),o(s," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:s})=>y("",e,`
`)+o(["interface",t,y("implements ",o(n," & ")),o(i," "),$(s)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>y("",e,`
`)+o(["union",t,o(n," "),y("= ",o(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>y("",e,`
`)+o(["enum",t,o(n," "),$(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>y("",e,`
`)+o([t,o(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>y("",e,`
`)+o(["input",t,o(n," "),$(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:s})=>y("",e,`
`)+"directive @"+t+(je(n)?y(`(
`,Te(o(n,`
`)),`
)`):y("(",o(n,", "),")"))+(i?" repeatable":"")+" on "+o(s," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>o(["extend schema",o(e," "),$(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>o(["extend scalar",e,o(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>o(["extend type",e,y("implements ",o(t," & ")),o(n," "),$(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>o(["extend interface",e,y("implements ",o(t," & ")),o(n," "),$(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>o(["extend union",e,o(t," "),y("= ",o(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>o(["extend enum",e,o(t," "),$(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>o(["extend input",e,o(t," "),$(n)]," ")}};function o(e,t=""){var n;return(n=e==null?void 0:e.filter(i=>i).join(t))!==null&&n!==void 0?n:""}function $(e){return y(`{
`,Te(o(e,`
`)),`
}`)}function y(e,t,n=""){return t!=null&&t!==""?e+t+n:""}function Te(e){return y("  ",e.replace(/\n/g,`
  `))}function je(e){var t;return(t=e==null?void 0:e.some(n=>n.includes(`
`)))!==null&&t!==void 0?t:!1}function Ee(e,t){switch(e.kind){case h.NULL:return null;case h.INT:return parseInt(e.value,10);case h.FLOAT:return parseFloat(e.value);case h.STRING:case h.ENUM:case h.BOOLEAN:return e.value;case h.LIST:return e.values.map(n=>Ee(n,t));case h.OBJECT:return X(e.fields,n=>n.name.value,n=>Ee(n.value,t));case h.VARIABLE:return t==null?void 0:t[e.name.value]}}function k(e){if(e!=null||N(!1,"Must provide name."),typeof e=="string"||N(!1,"Expected name to be a string."),e.length===0)throw new g("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!vt(e.charCodeAt(t)))throw new g(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!bt(e.charCodeAt(0)))throw new g(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function jt(e){if(e==="true"||e==="false"||e==="null")throw new g(`Enum values cannot be named: ${e}`);return k(e)}function Ge(e){return ne(e)||G(e)||A(e)||P(e)||q(e)||z(e)||le(e)||O(e)}function ne(e){return B(e,Z)}function G(e){return B(e,H)}function Ut(e){if(!G(e))throw new Error(`Expected ${p(e)} to be a GraphQL Object type.`);return e}function A(e){return B(e,et)}function kt(e){if(!A(e))throw new Error(`Expected ${p(e)} to be a GraphQL Interface type.`);return e}function P(e){return B(e,tt)}function q(e){return B(e,Ne)}function z(e){return B(e,nt)}function le(e){return B(e,L)}function O(e){return B(e,T)}function Be(e){return ne(e)||q(e)||z(e)||Le(e)&&Be(e.ofType)}function Ce(e){return ne(e)||G(e)||A(e)||P(e)||q(e)||Le(e)&&Ce(e.ofType)}function Pe(e){return ne(e)||q(e)}function ln(e){return G(e)||A(e)||P(e)}function Je(e){return A(e)||P(e)}function cn(e){if(!Je(e))throw new Error(`Expected ${p(e)} to be a GraphQL abstract type.`);return e}class L{constructor(t){Ge(t)||N(!1,`Expected ${p(t)} to be a GraphQL type.`),this.ofType=t}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class T{constructor(t){qe(t)||N(!1,`Expected ${p(t)} to be a GraphQL nullable type.`),this.ofType=t}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function Le(e){return le(e)||O(e)}function qe(e){return Ge(e)&&!O(e)}function Mt(e){if(!qe(e))throw new Error(`Expected ${p(e)} to be a GraphQL nullable type.`);return e}function pn(e){if(e)return O(e)?e.ofType:e}function dn(e){return ne(e)||G(e)||A(e)||P(e)||q(e)||z(e)}function Vt(e){if(e){let t=e;for(;Le(t);)t=t.ofType;return t}}function ze(e){return typeof e=="function"?e():e}function He(e){return typeof e=="function"?e():e}class Z{constructor(t){var n,i,s,a;const u=(n=t.parseValue)!==null&&n!==void 0?n:Fe;this.name=k(t.name),this.description=t.description,this.specifiedByURL=t.specifiedByURL,this.serialize=(i=t.serialize)!==null&&i!==void 0?i:Fe,this.parseValue=u,this.parseLiteral=(s=t.parseLiteral)!==null&&s!==void 0?s:(l,c)=>u(Ee(l,c)),this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(a=t.extensionASTNodes)!==null&&a!==void 0?a:[],t.specifiedByURL==null||typeof t.specifiedByURL=="string"||N(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${p(t.specifiedByURL)}.`),t.serialize==null||typeof t.serialize=="function"||N(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),t.parseLiteral&&(typeof t.parseValue=="function"&&typeof t.parseLiteral=="function"||N(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class H{constructor(t){var n;this.name=k(t.name),this.description=t.description,this.isTypeOf=t.isTypeOf,this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._fields=()=>Ye(t),this._interfaces=()=>Ke(t),t.isTypeOf==null||typeof t.isTypeOf=="function"||N(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${p(t.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:Xe(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Ke(e){var t;const n=ze((t=e.interfaces)!==null&&t!==void 0?t:[]);return Array.isArray(n)||N(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function Ye(e){const t=He(e.fields);return te(t)||N(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),be(t,(n,i)=>{var s;te(n)||N(!1,`${e.name}.${i} field config must be an object.`),n.resolve==null||typeof n.resolve=="function"||N(!1,`${e.name}.${i} field resolver must be a function if provided, but got: ${p(n.resolve)}.`);const a=(s=n.args)!==null&&s!==void 0?s:{};return te(a)||N(!1,`${e.name}.${i} args must be an object with argument names as keys.`),{name:k(i),description:n.description,type:n.type,args:We(a),resolve:n.resolve,subscribe:n.subscribe,deprecationReason:n.deprecationReason,extensions:R(n.extensions),astNode:n.astNode}})}function We(e){return Object.entries(e).map(([t,n])=>({name:k(t),description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:R(n.extensions),astNode:n.astNode}))}function te(e){return J(e)&&!Array.isArray(e)}function Xe(e){return be(e,t=>({description:t.description,type:t.type,args:Ze(t.args),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:t.extensions,astNode:t.astNode}))}function Ze(e){return X(e,t=>t.name,t=>({description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions,astNode:t.astNode}))}function fn(e){return O(e.type)&&e.defaultValue===void 0}class et{constructor(t){var n;this.name=k(t.name),this.description=t.description,this.resolveType=t.resolveType,this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._fields=Ye.bind(void 0,t),this._interfaces=Ke.bind(void 0,t),t.resolveType==null||typeof t.resolveType=="function"||N(!1,`${this.name} must provide "resolveType" as a function, but got: ${p(t.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:Xe(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class tt{constructor(t){var n;this.name=k(t.name),this.description=t.description,this.resolveType=t.resolveType,this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._types=Qt.bind(void 0,t),t.resolveType==null||typeof t.resolveType=="function"||N(!1,`${this.name} must provide "resolveType" as a function, but got: ${p(t.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return typeof this._types=="function"&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Qt(e){const t=ze(e.types);return Array.isArray(t)||N(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}class Ne{constructor(t){var n;this.name=k(t.name),this.description=t.description,this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._values=Gt(this.name,t.values),this._valueLookup=new Map(this._values.map(i=>[i.value,i])),this._nameLookup=Ve(this._values,i=>i.name)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(t){return this._nameLookup[t]}serialize(t){const n=this._valueLookup.get(t);if(n===void 0)throw new g(`Enum "${this.name}" cannot represent value: ${p(t)}`);return n.name}parseValue(t){if(typeof t!="string"){const i=p(t);throw new g(`Enum "${this.name}" cannot represent non-string value: ${i}.`+me(this,i))}const n=this.getValue(t);if(n==null)throw new g(`Value "${t}" does not exist in "${this.name}" enum.`+me(this,t));return n.value}parseLiteral(t,n){if(t.kind!==h.ENUM){const s=C(t);throw new g(`Enum "${this.name}" cannot represent non-enum value: ${s}.`+me(this,s),{nodes:t})}const i=this.getValue(t.value);if(i==null){const s=C(t);throw new g(`Value "${s}" does not exist in "${this.name}" enum.`+me(this,s),{nodes:t})}return i.value}toConfig(){const t=X(this.getValues(),n=>n.name,n=>({description:n.description,value:n.value,deprecationReason:n.deprecationReason,extensions:n.extensions,astNode:n.astNode}));return{name:this.name,description:this.description,values:t,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function me(e,t){const n=e.getValues().map(s=>s.name),i=Et(t,n);return It("the enum value",i)}function Gt(e,t){return te(t)||N(!1,`${e} values must be an object with value names as keys.`),Object.entries(t).map(([n,i])=>(te(i)||N(!1,`${e}.${n} must refer to an object with a "value" key representing an internal value but got: ${p(i)}.`),{name:jt(n),description:i.description,value:i.value!==void 0?i.value:n,deprecationReason:i.deprecationReason,extensions:R(i.extensions),astNode:i.astNode}))}class nt{constructor(t){var n;this.name=k(t.name),this.description=t.description,this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._fields=Bt.bind(void 0,t)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}toConfig(){const t=be(this.getFields(),n=>({description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:n.extensions,astNode:n.astNode}));return{name:this.name,description:this.description,fields:t,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Bt(e){const t=He(e.fields);return te(t)||N(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),be(t,(n,i)=>(!("resolve"in n)||N(!1,`${e.name}.${i} field has a resolve property, but Input Types cannot define resolvers.`),{name:k(i),description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:R(n.extensions),astNode:n.astNode}))}function hn(e){return O(e.type)&&e.defaultValue===void 0}const Ie=2147483647,_e=-2147483648,Ct=new Z({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=ce(e);if(typeof t=="boolean")return t?1:0;let n=t;if(typeof t=="string"&&t!==""&&(n=Number(t)),typeof n!="number"||!Number.isInteger(n))throw new g(`Int cannot represent non-integer value: ${p(t)}`);if(n>Ie||n<_e)throw new g("Int cannot represent non 32-bit signed integer value: "+p(t));return n},parseValue(e){if(typeof e!="number"||!Number.isInteger(e))throw new g(`Int cannot represent non-integer value: ${p(e)}`);if(e>Ie||e<_e)throw new g(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==h.INT)throw new g(`Int cannot represent non-integer value: ${C(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>Ie||t<_e)throw new g(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),Pt=new Z({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=ce(e);if(typeof t=="boolean")return t?1:0;let n=t;if(typeof t=="string"&&t!==""&&(n=Number(t)),typeof n!="number"||!Number.isFinite(n))throw new g(`Float cannot represent non numeric value: ${p(t)}`);return n},parseValue(e){if(typeof e!="number"||!Number.isFinite(e))throw new g(`Float cannot represent non numeric value: ${p(e)}`);return e},parseLiteral(e){if(e.kind!==h.FLOAT&&e.kind!==h.INT)throw new g(`Float cannot represent non numeric value: ${C(e)}`,e);return parseFloat(e.value)}}),_=new Z({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=ce(e);if(typeof t=="string")return t;if(typeof t=="boolean")return t?"true":"false";if(typeof t=="number"&&Number.isFinite(t))return t.toString();throw new g(`String cannot represent value: ${p(e)}`)},parseValue(e){if(typeof e!="string")throw new g(`String cannot represent a non string value: ${p(e)}`);return e},parseLiteral(e){if(e.kind!==h.STRING)throw new g(`String cannot represent a non string value: ${C(e)}`,{nodes:e});return e.value}}),x=new Z({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=ce(e);if(typeof t=="boolean")return t;if(Number.isFinite(t))return t!==0;throw new g(`Boolean cannot represent a non boolean value: ${p(t)}`)},parseValue(e){if(typeof e!="boolean")throw new g(`Boolean cannot represent a non boolean value: ${p(e)}`);return e},parseLiteral(e){if(e.kind!==h.BOOLEAN)throw new g(`Boolean cannot represent a non boolean value: ${C(e)}`,{nodes:e});return e.value}}),it=new Z({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=ce(e);if(typeof t=="string")return t;if(Number.isInteger(t))return String(t);throw new g(`ID cannot represent value: ${p(e)}`)},parseValue(e){if(typeof e=="string")return e;if(typeof e=="number"&&Number.isInteger(e))return e.toString();throw new g(`ID cannot represent value: ${p(e)}`)},parseLiteral(e){if(e.kind!==h.STRING&&e.kind!==h.INT)throw new g("ID cannot represent a non-string and non-integer value: "+C(e),{nodes:e});return e.value}}),Jt=Object.freeze([_,Ct,Pt,x,it]);function ce(e){if(J(e)){if(typeof e.valueOf=="function"){const t=e.valueOf();if(!J(t))return t}if(typeof e.toJSON=="function")return e.toJSON()}return e}function qt(e){return B(e,ie)}class ie{constructor(t){var n,i;this.name=k(t.name),this.description=t.description,this.locations=t.locations,this.isRepeatable=(n=t.isRepeatable)!==null&&n!==void 0?n:!1,this.extensions=R(t.extensions),this.astNode=t.astNode,Array.isArray(t.locations)||N(!1,`@${t.name} locations must be an Array.`);const s=(i=t.args)!==null&&i!==void 0?i:{};J(s)&&!Array.isArray(s)||N(!1,`@${t.name} args must be an object with argument names as keys.`),this.args=We(s)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:Ze(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}const zt=new ie({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[b.FIELD,b.FRAGMENT_SPREAD,b.INLINE_FRAGMENT],args:{if:{type:new T(x),description:"Included when true."}}}),Ht=new ie({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[b.FIELD,b.FRAGMENT_SPREAD,b.INLINE_FRAGMENT],args:{if:{type:new T(x),description:"Skipped when true."}}}),Kt="No longer supported",Yt=new ie({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[b.FIELD_DEFINITION,b.ARGUMENT_DEFINITION,b.INPUT_FIELD_DEFINITION,b.ENUM_VALUE],args:{reason:{type:_,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:Kt}}}),Wt=new ie({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[b.SCALAR],args:{url:{type:new T(_),description:"The URL that specifies the behavior of this scalar."}}}),Xt=Object.freeze([zt,Ht,Yt,Wt]);function Zt(e){return typeof e=="object"&&typeof(e==null?void 0:e[Symbol.iterator])=="function"}function oe(e,t){if(O(t)){const n=oe(e,t.ofType);return(n==null?void 0:n.kind)===h.NULL?null:n}if(e===null)return{kind:h.NULL};if(e===void 0)return null;if(le(t)){const n=t.ofType;if(Zt(e)){const i=[];for(const s of e){const a=oe(s,n);a!=null&&i.push(a)}return{kind:h.LIST,values:i}}return oe(e,n)}if(z(t)){if(!J(e))return null;const n=[];for(const i of Object.values(t.getFields())){const s=oe(e[i.name],i.type);s&&n.push({kind:h.OBJECT_FIELD,name:{kind:h.NAME,value:i.name},value:s})}return{kind:h.OBJECT,fields:n}}if(Pe(t)){const n=t.serialize(e);if(n==null)return null;if(typeof n=="boolean")return{kind:h.BOOLEAN,value:n};if(typeof n=="number"&&Number.isFinite(n)){const i=String(n);return Ue.test(i)?{kind:h.INT,value:i}:{kind:h.FLOAT,value:i}}if(typeof n=="string")return q(t)?{kind:h.ENUM,value:n}:t===it&&Ue.test(n)?{kind:h.INT,value:n}:{kind:h.STRING,value:n};throw new TypeError(`Cannot convert value to AST: ${p(n)}.`)}Ae(!1,"Unexpected input type: "+p(t))}const Ue=/^-?(?:0|[1-9][0-9]*)$/,Oe=new H({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:_,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new T(new L(new T(U))),resolve(e){return Object.values(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new T(U),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:U,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:U,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new T(new L(new T(st))),resolve:e=>e.getDirectives()}})}),st=new H({name:"__Directive",description:`A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,fields:()=>({name:{type:new T(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},isRepeatable:{type:new T(x),resolve:e=>e.isRepeatable},locations:{type:new T(new L(new T(rt))),resolve:e=>e.locations},args:{type:new T(new L(new T(we))),args:{includeDeprecated:{type:x,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(n=>n.deprecationReason==null)}}})}),rt=new Ne({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:b.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:b.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:b.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:b.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:b.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:b.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:b.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:b.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:b.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:b.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:b.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:b.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:b.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:b.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:b.UNION,description:"Location adjacent to a union definition."},ENUM:{value:b.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:b.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:b.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:b.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),U=new H({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new T(ut),resolve(e){if(ne(e))return w.SCALAR;if(G(e))return w.OBJECT;if(A(e))return w.INTERFACE;if(P(e))return w.UNION;if(q(e))return w.ENUM;if(z(e))return w.INPUT_OBJECT;if(le(e))return w.LIST;if(O(e))return w.NON_NULL;Ae(!1,`Unexpected type: "${p(e)}".`)}},name:{type:_,resolve:e=>"name"in e?e.name:void 0},description:{type:_,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:_,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new L(new T(at)),args:{includeDeprecated:{type:x,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(G(e)||A(e)){const n=Object.values(e.getFields());return t?n:n.filter(i=>i.deprecationReason==null)}}},interfaces:{type:new L(new T(U)),resolve(e){if(G(e)||A(e))return e.getInterfaces()}},possibleTypes:{type:new L(new T(U)),resolve(e,t,n,{schema:i}){if(Je(e))return i.getPossibleTypes(e)}},enumValues:{type:new L(new T(ot)),args:{includeDeprecated:{type:x,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(q(e)){const n=e.getValues();return t?n:n.filter(i=>i.deprecationReason==null)}}},inputFields:{type:new L(new T(we)),args:{includeDeprecated:{type:x,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(z(e)){const n=Object.values(e.getFields());return t?n:n.filter(i=>i.deprecationReason==null)}}},ofType:{type:U,resolve:e=>"ofType"in e?e.ofType:void 0}})}),at=new H({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new T(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},args:{type:new T(new L(new T(we))),args:{includeDeprecated:{type:x,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(n=>n.deprecationReason==null)}},type:{type:new T(U),resolve:e=>e.type},isDeprecated:{type:new T(x),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:_,resolve:e=>e.deprecationReason}})}),we=new H({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new T(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},type:{type:new T(U),resolve:e=>e.type},defaultValue:{type:_,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=oe(n,t);return i?C(i):null}},isDeprecated:{type:new T(x),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:_,resolve:e=>e.deprecationReason}})}),ot=new H({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new T(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},isDeprecated:{type:new T(x),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:_,resolve:e=>e.deprecationReason}})});var w;(function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"})(w||(w={}));const ut=new Ne({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:w.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:w.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:w.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:w.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:w.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:w.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:w.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:w.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),mn={name:"__schema",type:new T(Oe),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},yn={name:"__type",type:U,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new T(_),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Tn={name:"__typename",type:new T(_),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},lt=Object.freeze([Oe,st,rt,U,at,we,ot,ut]);function vn(e){return lt.some(({name:t})=>e.name===t)}function en(e){return B(e,ct)}function bn(e){if(!en(e))throw new Error(`Expected ${p(e)} to be a GraphQL schema.`);return e}class ct{constructor(t){var n,i;this.__validationErrors=t.assumeValid===!0?[]:void 0,J(t)||N(!1,"Must provide configuration object."),!t.types||Array.isArray(t.types)||N(!1,`"types" must be Array if provided but got: ${p(t.types)}.`),!t.directives||Array.isArray(t.directives)||N(!1,`"directives" must be Array if provided but got: ${p(t.directives)}.`),this.description=t.description,this.extensions=R(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._queryType=t.query,this._mutationType=t.mutation,this._subscriptionType=t.subscription,this._directives=(i=t.directives)!==null&&i!==void 0?i:Xt;const s=new Set(t.types);if(t.types!=null)for(const a of t.types)s.delete(a),j(a,s);this._queryType!=null&&j(this._queryType,s),this._mutationType!=null&&j(this._mutationType,s),this._subscriptionType!=null&&j(this._subscriptionType,s);for(const a of this._directives)if(qt(a))for(const u of a.args)j(u.type,s);j(Oe,s),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const a of s){if(a==null)continue;const u=a.name;if(u||N(!1,"One of the provided types for building the Schema is missing a name."),this._typeMap[u]!==void 0)throw new Error(`Schema must contain uniquely named types but contains multiple types named "${u}".`);if(this._typeMap[u]=a,A(a)){for(const l of a.getInterfaces())if(A(l)){let c=this._implementationsMap[l.name];c===void 0&&(c=this._implementationsMap[l.name]={objects:[],interfaces:[]}),c.interfaces.push(a)}}else if(G(a)){for(const l of a.getInterfaces())if(A(l)){let c=this._implementationsMap[l.name];c===void 0&&(c=this._implementationsMap[l.name]={objects:[],interfaces:[]}),c.objects.push(a)}}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(t){switch(t){case ge.QUERY:return this.getQueryType();case ge.MUTATION:return this.getMutationType();case ge.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(t){return this.getTypeMap()[t]}getPossibleTypes(t){return P(t)?t.getTypes():this.getImplementations(t).objects}getImplementations(t){const n=this._implementationsMap[t.name];return n??{objects:[],interfaces:[]}}isSubType(t,n){let i=this._subTypeMap[t.name];if(i===void 0){if(i=Object.create(null),P(t))for(const s of t.getTypes())i[s.name]=!0;else{const s=this.getImplementations(t);for(const a of s.objects)i[a.name]=!0;for(const a of s.interfaces)i[a.name]=!0}this._subTypeMap[t.name]=i}return i[n.name]!==void 0}getDirectives(){return this._directives}getDirective(t){return this.getDirectives().find(n=>n.name===t)}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:this.__validationErrors!==void 0}}}function j(e,t){const n=Vt(e);if(!t.has(n)){if(t.add(n),P(n))for(const i of n.getTypes())j(i,t);else if(G(n)||A(n)){for(const i of n.getInterfaces())j(i,t);for(const i of Object.values(n.getFields())){j(i.type,t);for(const s of i.args)j(s.type,t)}}else if(z(n))for(const i of Object.values(n.getFields()))j(i.type,t)}return t}function ue(e,t,n){if(e){if(e.kind===h.VARIABLE){const i=e.name.value;if(n==null||n[i]===void 0)return;const s=n[i];return s===null&&O(t)?void 0:s}if(O(t))return e.kind===h.NULL?void 0:ue(e,t.ofType,n);if(e.kind===h.NULL)return null;if(le(t)){const i=t.ofType;if(e.kind===h.LIST){const a=[];for(const u of e.values)if(ke(u,n)){if(O(i))return;a.push(null)}else{const l=ue(u,i,n);if(l===void 0)return;a.push(l)}return a}const s=ue(e,i,n);return s===void 0?void 0:[s]}if(z(t)){if(e.kind!==h.OBJECT)return;const i=Object.create(null),s=Ve(e.fields,a=>a.name.value);for(const a of Object.values(t.getFields())){const u=s[a.name];if(!u||ke(u.value,n)){if(a.defaultValue!==void 0)i[a.name]=a.defaultValue;else if(O(a.type))return;continue}const l=ue(u.value,a.type,n);if(l===void 0)return;i[a.name]=l}return i}if(Pe(t)){let i;try{i=t.parseLiteral(e,n)}catch{return}return i===void 0?void 0:i}Ae(!1,"Unexpected input type: "+p(t))}}function ke(e,t){return e.kind===h.VARIABLE&&(t==null||t[e.name.value]===void 0)}function tn(e){const t={descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1,...e},n=t.descriptions?"description":"",i=t.specifiedByUrl?"specifiedByURL":"",s=t.directiveIsRepeatable?"isRepeatable":"",a=t.schemaDescription?n:"";function u(l){return t.inputValueDeprecation?l:""}return`
    query IntrospectionQuery {
      __schema {
        ${a}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${n}
          ${s}
          locations
          args${u("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${n}
      ${i}
      fields(includeDeprecated: true) {
        name
        ${n}
        args${u("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${u("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${n}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${n}
      type { ...TypeRef }
      defaultValue
      ${u("isDeprecated")}
      ${u("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  `}function Me(e,t){J(e)&&J(e.__schema)||N(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${p(e)}.`);const n=e.__schema,i=X(n.types,r=>r.name,r=>I(r));for(const r of[...Jt,...lt])i[r.name]&&(i[r.name]=r);const s=n.queryType?d(n.queryType):null,a=n.mutationType?d(n.mutationType):null,u=n.subscriptionType?d(n.subscriptionType):null,l=n.directives?n.directives.map(pt):[];return new ct({description:n.description,query:s,mutation:a,subscription:u,types:Object.values(i),directives:l,assumeValid:t==null?void 0:t.assumeValid});function c(r){if(r.kind===w.LIST){const f=r.ofType;if(!f)throw new Error("Decorated type deeper than introspection query.");return new L(c(f))}if(r.kind===w.NON_NULL){const f=r.ofType;if(!f)throw new Error("Decorated type deeper than introspection query.");const Q=c(f);return new T(Mt(Q))}return m(r)}function m(r){const f=r.name;if(!f)throw new Error(`Unknown type reference: ${p(r)}.`);const Q=i[f];if(!Q)throw new Error(`Invalid or incomplete schema, unknown type: ${f}. Ensure that a full introspection query is used in order to build a client schema.`);return Q}function d(r){return Ut(m(r))}function v(r){return kt(m(r))}function I(r){if(r!=null&&r.name!=null&&r.kind!=null)switch(r.kind){case w.SCALAR:return M(r);case w.OBJECT:return K(r);case w.INTERFACE:return D(r);case w.UNION:return E(r);case w.ENUM:return pe(r);case w.INPUT_OBJECT:return V(r)}const f=p(r);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${f}.`)}function M(r){return new Z({name:r.name,description:r.description,specifiedByURL:r.specifiedByURL})}function S(r){if(r.interfaces===null&&r.kind===w.INTERFACE)return[];if(!r.interfaces){const f=p(r);throw new Error(`Introspection result missing interfaces: ${f}.`)}return r.interfaces.map(v)}function K(r){return new H({name:r.name,description:r.description,interfaces:()=>S(r),fields:()=>F(r)})}function D(r){return new et({name:r.name,description:r.description,interfaces:()=>S(r),fields:()=>F(r)})}function E(r){if(!r.possibleTypes){const f=p(r);throw new Error(`Introspection result missing possibleTypes: ${f}.`)}return new tt({name:r.name,description:r.description,types:()=>r.possibleTypes.map(d)})}function pe(r){if(!r.enumValues){const f=p(r);throw new Error(`Introspection result missing enumValues: ${f}.`)}return new Ne({name:r.name,description:r.description,values:X(r.enumValues,f=>f.name,f=>({description:f.description,deprecationReason:f.deprecationReason}))})}function V(r){if(!r.inputFields){const f=p(r);throw new Error(`Introspection result missing inputFields: ${f}.`)}return new nt({name:r.name,description:r.description,fields:()=>ee(r.inputFields)})}function F(r){if(!r.fields)throw new Error(`Introspection result missing fields: ${p(r)}.`);return X(r.fields,f=>f.name,se)}function se(r){const f=c(r.type);if(!Ce(f)){const Q=p(f);throw new Error(`Introspection must provide output type for fields, but received: ${Q}.`)}if(!r.args){const Q=p(r);throw new Error(`Introspection result missing field args: ${Q}.`)}return{description:r.description,deprecationReason:r.deprecationReason,type:f,args:ee(r.args)}}function ee(r){return X(r,f=>f.name,de)}function de(r){const f=c(r.type);if(!Be(f)){const dt=p(f);throw new Error(`Introspection must provide input type for arguments, but received: ${dt}.`)}const Q=r.defaultValue!=null?ue(Nt(r.defaultValue),f):void 0;return{description:r.description,type:f,defaultValue:Q,deprecationReason:r.deprecationReason}}function pt(r){if(!r.args){const f=p(r);throw new Error(`Introspection result missing directive args: ${f}.`)}if(!r.locations){const f=p(r);throw new Error(`Introspection result missing directive locations: ${f}.`)}return new ie({name:r.name,description:r.description,isRepeatable:r.isRepeatable,locations:r.locations.slice(),args:ee(r.args)})}}function nn(e){return wt(e,{noLocation:!0})}function Nn(e){return C(e)}const W="# Generate operation by click graphql schema on the left panel",ye=[];function sn(e){return!!e&&e.split(`
`).some(t=>{const n=t.trim();return!!n&&!n.match(/^#/)})}let ve;const rn=new Promise(e=>{ve=e}),wn=ft((e,t)=>({engineStartCallback:()=>{ve==null||ve()},apiDesc:void 0,query:W,editorQuery:W,lastSavedQuery:void 0,apiPath:"",setAPIPath:async n=>{e({apiPath:n}),await t().refreshAPI(!1),ye.forEach(i=>i())},setQuery(n,i=!1){(!i||!n)&&(n?t().editorQuery===n?n.endsWith(" ")?e({editorQuery:t().editorQuery.slice(0,-1)}):e({editorQuery:t().editorQuery+" "}):e({editorQuery:n}):t().editorQuery===W?(console.error(3),e({editorQuery:W+" "})):(console.error(4),e({editorQuery:W}))),e({query:n||W});try{if(!sn(n))e({schemaAST:void 0});else{const s=nn(n);e({schemaAST:s})}}catch{}},clearHistoryFlag:!1,originSchema:void 0,schema:void 0,schemaAST:void 0,schemaTypeMap:{},subscriptionController:void 0,computed:{get operationType(){var i,s;const n=(i=t().schemaAST)==null?void 0:i.definitions;if(n)return((s=n[0])==null?void 0:s.kind)===h.OPERATION_DEFINITION?n[0].operation:void 0},get saved(){const{query:n,lastSavedQuery:i}=t();return i===void 0||n===W&&!i?!0:i===n}},abortSubscription:()=>{var n;(n=t().subscriptionController)==null||n.abort(),e({subscriptionController:void 0})},saveSubscriptionController:n=>{e({subscriptionController:n})},pureUpdateAPI:n=>{e(i=>({apiDesc:{...i.apiDesc,...n}}))},updateAPI:n=>Y.put(`/operation/${t().apiPath}`,n).then(i=>{t().pureUpdateAPI(n),re()}),changeEnable:n=>Y.put("/operation",{path:t().apiPath,enabled:n}).then(i=>{t().pureUpdateAPI({enabled:n}),re()}),updateAPIName:n=>Y.post("/operation/rename",{src:t().apiPath,dst:n,overload:!1}).then(()=>(t().pureUpdateAPI({path:n}),ht(`/operation/${t().apiPath}`),re())),updateContent:(n,i=!0)=>{var a;const s=t().schemaAST;return!n||!s?(i&&xe.error(Re.formatMessage({id:"c8WRih",defaultMessage:[{type:0,value:"请输入合法的 GraphQL 查询语句"}]})),!1):s.definitions.length>1?(i&&xe.error(Re.formatMessage({id:"glR5T7",defaultMessage:[{type:0,value:"不支持多条查询语句"}]})),!1):n.trim()===((a=t().lastSavedQuery)==null?void 0:a.trim())?!0:Y.post(`/operation/graphql/${t().apiPath}`,n).then(async()=>{const u=n??"";return t().setQuery(u),e({lastSavedQuery:u}),e(l=>({apiDesc:{...l.apiDesc,content:u}})),re(),!0}).catch(()=>!1)},async updateRemark(n){return Y.put("/operation",{path:t().apiPath,remark:n}).then(()=>(t().pureUpdateAPI({remark:n}),!0)).catch(()=>!1)},autoSave(){return t().updateContent(t().query,!1)},refreshAPI:async(n=!0)=>{const i=t().apiPath;try{const s=await Y.get(`/operation/${i}`);if(e({apiDesc:s}),!n){const a=await Y.get(`/operation/graphql/${t().apiPath}`);t().setQuery(a??""),e({clearHistoryFlag:!t().clearHistoryFlag}),e({lastSavedQuery:a})}}catch{re()}},refreshSchema:async()=>(await rn,fetch("/app/main/graphql",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json","X-FB-Authentication":mt()||""},body:JSON.stringify({query:tn({directiveIsRepeatable:!0})})}).then(n=>n.json()).then(n=>{const i=n.data;if(!fe.isEqual(t().originSchema,i)){console.log("schema changed");const s=Me(i);e({originSchema:i,schema:s,schemaTypeMap:fe.keyBy(i.__schema.types,"name")})}}).catch(()=>{})),setSchema(n){if(!fe.isEqual(t().originSchema,n)){console.log("schema changed");const i=Me(n);e({originSchema:n,schema:i,schemaTypeMap:fe.keyBy(n.__schema.types,"name")})}},appendToAPIRefresh:n=>{ye.push(n)},dispendToAPIRefresh:n=>{const i=ye.indexOf(n);i>-1&&ye.splice(i,1)}}));export{ue as $,Le as A,ne as B,Dt as C,oe as D,en as E,Me as F,Yt as G,tn as H,Ge as I,Pt as J,Nn as K,ae as L,Ne as M,x as N,cn as O,et as P,H as Q,nt as R,mn as S,yn as T,It as U,_t as V,Et as W,Xt as X,Jt as Y,lt as Z,Ve as _,le as a,Ht as a0,zt as a1,un as a2,Z as a3,Je as b,A as c,G as d,bn as e,qt as f,Be as g,fn as h,O as i,dn as j,vn as k,P as l,q as m,z as n,Ce as o,hn as p,T as q,L as r,ln as s,Vt as t,wn as u,pn as v,Tn as w,Qe as x,Pe as y,C as z};
