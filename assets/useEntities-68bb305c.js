import{l as R,V as E,K as S,r as v}from"./index-d217b560.js";import{b as w}from"./PrismaSchemaActions-5cb76651.js";import{m as b}from"./fireBoomAPIOperator-7a09bd57.js";import{P as h}from"./PrismaSchemaContext-b7778124.js";import{r as k,a as D,b as P}from"./ModelingHelpers-90ccc074.js";import{D as y}from"./datasource-aaff5797.js";const c={extractDefaultAttrArgs:t=>{const{value:r}=t[0]??{value:void 0};return typeof r=="object"&&r.name||r},extractNormalAttrArgs:t=>{const{value:r}=t[0]??{value:void 0};return r},extractIndexAttributeArgs:t=>{const r=(t==null?void 0:t.map(e=>e.value))??[],o=r.filter(e=>e.key==="fields").map(e=>e.value).flatMap(e=>e.args),u=r.length>=1?r[0].args:[],a=t==null?void 0:t.map(e=>e.value).filter(e=>e.key==="name").map(e=>e.value)[0],s=t==null?void 0:t.map(e=>e.value).filter(e=>e.key==="map").map(e=>e.value)[0];return{fields:o.length>0?o:u,name:a,map:s}},extractRelationAttributeArgs:t=>{var s,e,i;const r=t.map(n=>n.value).filter(n=>n.key==="name").map(n=>n.value)[0],o=(e=(s=t[0])==null?void 0:s.value)!=null&&e.key||(i=t[0])==null?void 0:i.value,u=t.map(n=>n.value).filter(n=>n.key==="fields").map(n=>n.value).flatMap(n=>n.args),a=t.map(n=>n.value).filter(n=>n.key==="references").map(n=>n.value).flatMap(n=>n.args);return{name:r||o,fields:u,references:a}},buildNewRelationArgs:(t,r,o)=>{const u=[];return t&&u.push({type:"attributeArgument",value:{type:"keyValue",key:"name",value:t}}),r&&r.length>0&&u.push({type:"attributeArgument",value:{type:"keyValue",key:"fields",value:{type:"array",args:r}}}),o&&o.length>0&&u.push({type:"attributeArgument",value:{type:"keyValue",key:"references",value:{type:"array",args:o}}}),u}},L=(t,r)=>{var s,e;const o=(s=t.attributes)==null?void 0:s.find(i=>i.name==="relation"),u=((e=o==null?void 0:o.args)==null?void 0:e.map(i=>i.value).filter(i=>i.key==="fields").map(i=>i.value).flatMap(i=>i.args))??[];return!!r.properties.filter(i=>i.type==="field").map(i=>i).filter(i=>u.includes(i.name)).find(i=>{var n;return(n=i.attributes)==null?void 0:n.find(p=>p.name==="unique")})},x=(t,r)=>{const o=[...r];return t.properties=t.properties??[],t.properties.filter(a=>a.type==="field").map(a=>a).filter(a=>{var s;return(s=a.attributes)==null?void 0:s.find(e=>e.name==="relation")}).forEach(a=>{var n,p;const s=a.fieldType,{name:e}=c.extractRelationAttributeArgs(((p=(n=a.attributes)==null?void 0:n.find(l=>l.name==="relation"))==null?void 0:p.args)??[]),i=o.filter(l=>l.type==="model").map(l=>l).find(l=>l.name===s);if(i){const l=L(a,t);let f=!1;const A=i.properties.map(m=>{var d,g;if(m.type==="field"&&m.fieldType===t.name){if(e){const{name:N}=c.extractRelationAttributeArgs(((g=(d=m.attributes)==null?void 0:d.find(B=>B.name==="relation"))==null?void 0:g.args)??[]);if(N!==e)return m}return f=!0,{...m,array:!l,optional:l}}return m});if(!f){const m={type:"attribute",kind:"field",name:"relation",args:c.buildNewRelationArgs(e,[],[])};A.push({type:"field",name:e?e.replaceAll('"',"").toLowerCase():`${t.name.toLowerCase()}${l?"":"s"}`,fieldType:t.name,array:!l,optional:l,attributes:e?[m]:[]})}o.forEach((m,d)=>{m.id===i.id&&(o[d]={...i,properties:A})})}}),o},F=(t,r,o)=>{const u=t.map(s=>s.fieldType),a=t.map(s=>{var e,i;return c.extractRelationAttributeArgs(((i=(e=s.attributes)==null?void 0:e.find(n=>n.name==="relation"))==null?void 0:i.args)??[])}).map(s=>s.name);return o.map(s=>{if(s.type==="model"&&u.includes(s.name)){const e={...s};return{...e,properties:e.properties.filter(i=>{var n,p;if(i.type==="field"&&i.fieldType===r){const{name:l}=c.extractRelationAttributeArgs(((p=(n=i.attributes)==null?void 0:n.find(f=>f.name==="relation"))==null?void 0:p.args)??[]);return!a.includes(l)}return!0})}}return s})},M=t=>({addModel:r=>{const o=[...t,r];return x(r,o)},updateModel:r=>{const o=t.find(e=>e.id===r.id);if(!o)return t;const u=o==null?void 0:o.properties.filter(e=>{var i;return e.type==="field"&&((i=e.attributes)==null?void 0:i.find(n=>n.name==="relation"))}).map(e=>e),a=r.properties.filter(e=>{var i;return e.type==="field"&&((i=e.attributes)==null?void 0:i.find(n=>n.name==="relation"))}).map(e=>e),s=u.filter(e=>!a.find(i=>{var n,p;return JSON.stringify((n=i.attributes)==null?void 0:n.find(l=>l.name==="relation"))===JSON.stringify((p=e.attributes)==null?void 0:p.find(l=>l.name==="relation"))}));return x(r,F(s,r.name,t).map(e=>e.id===r.id?r:e))},addEnum:r=>[...t,r],addEnums:r=>[...t,...r],updateEnum:r=>t.map(o=>o.id===r.id?r:o),deleteEntity:r=>{const o=t.find(a=>a.id===r);if(!o)return t;const u=o.name;return t.filter(a=>a.id!==r).map(a=>a.type==="model"?{...a,properties:a.properties.filter(s=>!(s.type==="field"&&s.fieldType===u))}:a)},cleanEmptyNameEntity:()=>t.filter(r=>!(["enum","model"].includes(r.type)&&!r.name)),updateEntityName:(r,o)=>{const u=t.find(a=>a.id===r).name;return t.map(a=>{if(a.id!==r&&a.type==="model"){const s={...a},e=[...s.properties];return{...s,properties:e.map(i=>i.type==="field"&&i.fieldType===u?{...i,fieldType:o}:i)}}return a.id===r&&["enum","model"].includes(a.type)?{...a,name:o}:a})}});R.throttle(()=>{E.error("当前schema不合法",3)},3e3);const W=()=>{const t=S(),{state:{blocks:r,currentDBSource:o,originBlocks:u},dispatch:a}=v.useContext(h);return{blocks:r,originBlocks:u,updateAndSaveBlock:p=>(p.forEach(l=>{l.type==="model"&&!l.properties&&(l.properties=[])}),b(p,o.name).then(()=>k(o.name)).catch(l=>{throw a(w(M(r).cleanEmptyNameEntity())),E.error(t.formatMessage({id:"waeVf8",defaultMessage:[{type:0,value:"数据迁移失败！error: "},{type:1,value:"error"}]},{error:l.message})),l})),applyLocalSchema:p=>{try{D(p,a)}catch{}},applyLocalBlocks:p=>{P(p,a)},refreshBlocks:()=>k(o.name)}},O=()=>{const{state:{blocks:t,currentDBSource:r}}=v.useContext(h);let o=r.kind;if(o==y.Prisma){const u=t.filter(a=>a.type==="datasource").map(a=>a).flatMap(a=>a.assignments.filter(s=>s.type==="assignment"&&s.key==="provider").map(s=>s).map(s=>s.value).map(s=>s.toLowerCase().replace(/^"|"$/g,""))).pop();if(u)for(const a in y)a.toLowerCase()===u&&(o=y[a])}return{...r,realKind:o}},_=()=>{const{state:{blocks:t,delMap:r,editMap:o,newMap:u}}=v.useContext(h),a=()=>Math.max(...t.map(n=>n.id))+1;let s=[],e,i;for(const n of t)switch(n.type){case"enum":case"model":e=n;break;case"comment":i=n.text.replace(/^\/{3}\s*/,"");break;case"break":e&&(s.push({...e,comment:i}),e=void 0,i=void 0);break}return{entities:s,delMap:r,editMap:o,newMap:u,getNextId:a,getFirstEntity:()=>t.find(n=>["enum","model"].includes(n.type))}};export{c as A,M as P,O as a,W as b,_ as u};
